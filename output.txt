Directory Tree:

  |-src
  |  |-Common
  |  |-Components
  |  |-Config
  |  |-Images
  |  |-Screens

Concatenated Output:

/* ChatGPT Ref: ./src/App.css */
.App {
  text-align: left;
}

.App-logo {
  height: 20vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 80s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

table, th, td {
  border: 1px solid;
}

.headerstyle {
  background-color: beige;
  border-bottom-left-radius: 20px;
  border-bottom-right-radius: 20px;
}

.official-menu-buttonstyle {
  background-color: beige;
  border-color: darkblue;
  border-width: 5px;
  border-radius: 10px;
  margin-right: 1%;
  margin-bottom: 1%;
  margin-top: 1%;
  width: 220px;
}

.official-general-buttonstyle {
  background-color: light blue;
  border-radius: 10px;
  border-color: darkblue;
  border-width: 3px;
  margin-right: 1%;
  margin-bottom: 1%;
  margin-top: 1%;
  width: 160px;
  height: 40px
}
/* ChatGPT Ref: ./src/App.js */
/*********************************
 * 
 * see ./Components/Nav.js to get your bearings for this project.
 * 
 *********************************/
import React from 'react';
import Header from "./Components/Header";
import Nav from "./Components/Nav";
import MenuBar from "./Components/MenuBar";
import './App.css';
import Container from 'react-bootstrap/Container';
import config from './Config/config';
import commonUtils from './Common/commonUtils';
import coinUtilsLegacy from './Common/coinUtilsLegacy';

//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";

class App extends React.Component {
  constructor (props) {
    super(props);
    this.state = {
      checked: false,
      address: '',
      destination_page: 'B1',
      selectedAPI: config.API_BlockCypher
    };
  }

  // generic App.js-level catch-all for many things.
  generica(a) {
    commonUtils.mathProc("typ", "value");   // temporary, sample remove this
    coinUtilsLegacy.coinProc("typ", "value");     // temporary, sample remove this
    // From Nav.js -- Navigation from the MenuBar:
    if (a.length === 2 && a.substring(1,2) === '1') {   // A1, B1, C1, etc
      this.setState({destination_page:a});
    } 
    else if (a === config.Load_Button_Pressed) {        // LOAD BUTTON from B1.js
      // function for performing the load transaction logic goes here
      alert(config.Load_Button_Pressed);
    }
    else if (a === config.API_BlockCypher || a === config.API_TBD) {        // Selected API to use from B1->APISelector
      this.setState({selectedAPI:a})
    }
    else if (a && a.id && a.id === config.Individual_Transaction_01) {
//      alert("Individual Transaction Selected. This is a WIP. See the console (via F12) for more information on this transaction.");
      console.log(a);   // here is a single dogecoin transaction.
    }
    else if (a === "meat popsicle") {     // test landing spot.
      alert("meat popsicle");
    }
    else {             // otherwise, just display the message.
      console.log(a);
    }
  }

  render () {
    var generica = this.generica;
    return (
      <Container className="App basic rounded">
          <Header></Header>
          <MenuBar generica={generica.bind(this)}></MenuBar>
          <br />
          <Nav generica={generica.bind(this)} destination_page={this.state.destination_page} selectedAPI={this.state.selectedAPI}></Nav>
        </Container>
      );
  }
}

export default App;
/* ChatGPT Ref: ./src/App.test.js */
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
/* ChatGPT Ref: ./src/Common/blockcypher_API.js */
import axios from 'axios';
import config from "../Config/config";

export default async function get_the_Blockcypher_transactions(address) {
        console.info("top of get_the_Blockcypher_transactions(" + address + ") in blockcypher(update).");
        try {

                let work_txs = [];
                let cum_total = parseFloat("0.0");
                const url_stg = "https://api.blockcypher.com/v1/doge/main/addrs/" + address + "?includeScript=true&unspentOnly=true";
                const result = await axios.get(url_stg);
                const data = result.data;
                console.log(data);


                if (data && data.txrefs && data.txrefs.length) {
                        console.info("Here's data.txs. Number in array: " + data.txrefs.length + '.');
                        console.log(data.txrefs);

                        for (let i=0; i < data.txrefs.length; i++)
                        {
                                const obj = {
                                        txid: data.txrefs[i].tx_hash,
                                        output_no: data.txrefs[i].tx_output_n,
                                        value: data.txrefs[i].value/100000000,
                                        script_hex: data.txrefs[i].script,
                                        rel: []
                                }
                                work_txs.push(obj);
                                cum_total = cum_total + (data.txrefs[i].value/100000000);
                        }

                        console.info("Here are the txs so far:");
                        for (let i=0;i<work_txs.length;i++) {
                                console.info( "blockcypher:TX(" + i + "): " + work_txs[i].txid + ", output_no: " + work_txs[i].output_no + ", value: " + work_txs[i].value);
                        }

                        if (data.hasMore === true) {            
//                                alert("data.hasMore = true in get_the_Blockcypher_transactions_blockcypher_update! This is a sandy account. Cumulative total = " + cum_total);
                                alert("This is a sandy account! Cumlative total = " + cum_total + ".");
                        }

                        console.info("Cumulative Totals from transactions: "  + cum_total);
                        return work_txs;
                } else {
                        return config.No_Unspent_Transactions;
                }

        } catch (e) {
                console.log(e);
        }
}
/* ChatGPT Ref: ./src/Common/coinUtilsLegacy.js */

// common coin functions, grow into this
function coinProc(typ, val) {
    switch (typ) {
        default:
            console.log(`it's coinproc: typ = ${typ} and val = '${val}'`)
            break;
    }
} 

const coinUtilsLegacy = {
    coinProc
}

export default coinUtilsLegacy;
/* ChatGPT Ref: ./src/Common/commonUtils.js */
import { save } from 'save-file'

// common math functions, grow into this
function mathProc(typ, val) {
    switch (typ) {
        default:
            console.log(`it's mathproc: typ = ${typ} and val = '${val}'`)
            break;
    }
} 

async function saveFile(a,b) {  // The save button on B1.js, e.g
    try {
        const msg = "Press OK to create new local file: " + b
        if (window.confirm(msg)) {
            await save(a,b)
        }
    } catch (err) {
        console.error("Error in function saveFile().")
        alert(err)
    }
}

const commonUtils = {
    saveFile,
    mathProc
}

export default commonUtils
/* ChatGPT Ref: ./src/Components/APISelector.js */
import React from 'react';
import Dropdown from 'react-bootstrap/Dropdown';
import DropdownButton from 'react-bootstrap/DropdownButton';
import config from "../Config/config";
//import '../App.css';
/*
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
*/

class APISelector extends React.Component {
    constructor (props) {
        super (props);
        this.state = {
          foo:1
        }
    }

    DropdownProc = (a) => {
      this.props.generica(a);
    }

    render () {
         return (
            <DropdownButton title={this.props.selectedAPI} onSelect={this.DropdownProc}>
              <Dropdown.Item eventKey={config.API_BlockCypher}>{config.API_BlockCypher}</Dropdown.Item>
              <Dropdown.Item eventKey={config.API_TBD}>{config.API_TBD}</Dropdown.Item>
            </DropdownButton>
         );
    }
}

export default APISelector;
/* ChatGPT Ref: ./src/Components/Header.js */
import React from 'react';
import Container from 'react-bootstrap/Container';
import logo from '../Images/toolfrogLogo.png';
import '../App.css';
/*
import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
*/

class Header extends React.Component {
    constructor (props) {
        super (props);
        this.state = {
            foo: true
        }
    }

    render () {
         return (
            <Container className="headerstyle">
                <img src={logo} className="App-logo " style={{marginLeft: "3%"}} alt="logo" />
                 <h1 style={{color: "white", marginLeft: "5%", position: "relative", zIndex: "1"}}>ToolFrog</h1>
                 <br />
             </Container>
         );
    }
}

export default Header;
/* ChatGPT Ref: ./src/Components/MenuBar.js */
import React from 'react';
import styled from "styled-components";
import Container from 'react-bootstrap/Container';
//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";

import '../App.css';

const HoverButton = styled.button`
    :hover {
        background-color: orange;
        cursor: pointer;
        position: relative;
        top: 1px;
        left: 1px;
    }`;

class MenuBar extends React.Component {
    constructor (props) {
        super (props);
        this.state = {
            foo: true
        }
    }

    render () {
        var generica = this.props.generica;
         return (
             <Container>
                <br />
                     <HoverButton className="official-menu-buttonstyle" onClick={() => generica('A1')}>
                        Home
                     </HoverButton>
                     <HoverButton className="official-menu-buttonstyle" onClick={() => generica('B1')}>
                        Transactions
                     </HoverButton>
                     <HoverButton className="official-menu-buttonstyle" onClick={() => generica('E1')}>
                        Withdraw
                     </HoverButton>
                     <HoverButton className="official-menu-buttonstyle" onClick={() => generica('C1')}>
                       About
                     </HoverButton>
                     <HoverButton className="official-menu-buttonstyle" onClick={() => generica('D1')}>
                        DBS 
                     </HoverButton>
                <br />
             </Container>
         );
    }
}

export default MenuBar;
/* ChatGPT Ref: ./src/Components/Nav.js */
/***************************************************************************
* Nav - navigation for the site.
*************************************************************************/
import React from "react";
import A1 from "../Screens/A1";     // HOME
import B1 from "../Screens/B1";     // TRANSACTIONS
import C1 from "../Screens/C1";     // ABOUT
import D1 from "../Screens/D1";     // DBS
import E1 from "../Screens/E1";     // WITHDRAW

class Nav extends React.Component {

    render () {
        
        if (this.props.destination_page === 'A1') {
            return(<A1/>);
        } else if (this.props.destination_page === 'B1') {
            return(<B1 generica={this.props.generica} selectedAPI={this.props.selectedAPI} />);
        } else if (this.props.destination_page === 'C1') {
            return(<C1/>);
        } else if (this.props.destination_page === 'D1') {
            return(<D1/>);
        } else if (this.props.destination_page === 'E1') {
            return(<E1/>);
        } else {
            alert("Unexpected value of " + this.props.destination_page + ". Defaulting to A1.");
            return (<A1/>);
        }
    }

}

export default Nav;
/* ChatGPT Ref: ./src/Config/config.js */
const config = 
{ 
    No_Unspent_Transactions: "No Unspent Transactions for this Address.",
    No_Work_To_Do: "No work to do here.",
    Save_Button_Pressed: "The Saved Button was pressed.",
    Load_Button_Pressed: "The Load Button was pressed.",
    API_BlockCypher: "BlockCypher.io",
    Individual_Transaction_01: "Individual Transaction 01",
    Out_Of_Range:               "Out of Range.",
    API_TBD: "API TBD",
    result_init: [
                {
                    txid: "none",
                    output_no: "none",
                    value: "none",
                    script_hex: "none"
                }
            ],
    defaultMiningFee: "0.01"
}

export default config;
/* ChatGPT Ref: ./src/index.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}
/* ChatGPT Ref: ./src/index.js */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
/* ChatGPT Ref: ./src/reportWebVitals.js */
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
/* ChatGPT Ref: ./src/Screens/A1.js */
/* HOME - A1 */
import React from 'react';
import Container from 'react-bootstrap/Container';
import '../App.css';

//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";

class A1 extends React.Component {


    render () {
        return (
            <Container>
                <h1>HOME</h1>
                <br />
                <p>Watch this site for added decentralized dogecoin functionality!</p>
                <h5>Current Functionality:</h5>
                <ul>
                    <li>Retrieve Unspent Transactions</li>
                    <li>Save Transactions to local file </li>
                    <li>Load Transactions from local file </li>
                </ul>
            </Container>
        );
    }
}

export default A1;
/* ChatGPT Ref: ./src/Screens/B1.js */
/* TRANSACTIONS - B1 */
import React from 'react';
import APISelector from '../Components/APISelector';
import commonUtils  from '../Common/commonUtils';
import get_the_Blockcypher_transactions from '../Common/blockcypher_API';
import styled from "styled-components";
import Container from 'react-bootstrap/Container';
import config from "../Config/config";
import '../App.css';
//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";

let result = config.result_init;

const HoverButton = styled.button`
    :hover {
        background-color: lightgreen;
        cursor: pointer;
        position: relative;
        top: 1px;
        left: 1px;
    }`;


class B1 extends React.Component {

    constructor (props) {
        super(props);
        this.state = {
            checked: false,
            address: '',
            destAddress: '',
            SaveButtonDisabled: true,
            SingleTransactionDisabled: true,
            SingleTransactionPreviewDisabled: true,
            transactionCount: 69,
            amountForBatch: 0,           // the cumulative total of dogecoin in this selection of transactions
            selectedIndex: config.Out_Of_Range,
            oneTransaction: {},
            sendAmount: '',
            sendAmountGrandTotal: ''
        };
        this.handleChange = this.handleChange.bind(this);
        this.handleTogChange = this.handleTogChange.bind(this);
        this.handleDestAddressChange = this.handleDestAddressChange.bind(this);
        this.handleSendAmountChange = this.handleSendAmountChange.bind(this);
        this.createSpendOne = this.createSpendOne.bind(this);
        this.getUTxs = this.getUTxs.bind(this);
    }

    handleChange(event) {
        this.setState({address: event.target.value});
    }

    handleDestAddressChange(event) {
        this.setState({destAddress: event.target.value});
    }

    handleSendAmountChange(event) {
        this.setState({sendAmount: event.target.value});
    }

    handleTogChange(checked) {
        this.setState({ checked });
    }

    // validate input fields
    createSpendOne = (event) =>  {
        event.preventDefault();
        if (this.state.sendAmount <= 0 || parseFloat(this.state.sendAmount) > parseFloat(this.state.oneTransaction.value)) {
            alert(`ERROR: Monetary Send value of ${this.state.sendAmount} is out of range for the selected transaction (${this.state.oneTransaction.value}).`);
            return;
        } else if (this.state.destAddress.length !== 34) {
            alert("ERROR: The destination address is not 34 bytes in length.");
            return
        } else if (this.state.destAddress.slice(0,1) !== 'D' && this.state.destAddress.slice(0,1) !== 'A' && this.state.destAddress.slice(0,1) !== '9') {
            alert("Destination Dogecoin Address must start with an A, 9, or D.");
            return;
        } else {
            // happy path
            this.setState({SingleTransactionPreviewDisabled: false})
            if (this.state.sendAmount === this.state.oneTransaction.value)      {       // subtract mining fee from total
                this.setState({sendAmountGrandTotal: this.state.sendAmount})
            } else {        // adding mining fee to total
                this.setState({sendAmountGrandTotal: (parseFloat(this.state.sendAmount) + parseFloat(config.defaultMiningFee))})
            }
        }
    }

    displayAndForceUpdate(file) {
        if (file) {
            this.setState({address: file.name.slice(0,34)})
        }
        this.setState({SaveButtonDisabled: false})
        this.setState({transactionCount: result.length});
        const cumTotal = result.reduce((a,b) => {return parseFloat(a)+parseFloat(b.value)},0).toFixed(8);
        this.setState({amountForBatch:cumTotal});
        this.forceUpdate();

    }
    clearTransactions() {
        result = config.result_init;
        this.setState({SaveButtonDisabled: true})
        this.setState({address: ''})
        this.setState({transactionCount: 0});
        this.setState({amountForBatch: 0});
        this.forceUpdate();
    }

    // User updates the 'select one transaction' input box
    selectOneIndex(evt) {
        if (isNaN(evt.target.value) || evt.target.value > result.length-1 || evt.target.value < 0) {
            this.setState({selectedIndex: config.Out_Of_Range});
        } else {
            this.setState({selectedIndex: parseInt(evt.target.value)});       // TBD: do something with this index
        }
    }

    // processing one transaction
    submitOneIndex() {
        if (this.state.selectedIndex === config.Out_Of_Range) {
            alert("The selected index is out of range! Please try again.");
        }   else {
            const output = {
                id:             config.Individual_Transaction_01,
                transaction:    result[this.state.selectedIndex]
            }
            this.props.generica(output); // send this one selected transaction back to App.js
            this.setState({oneTransaction: result[this.state.selectedIndex]})
            this.setState({SingleTransactionDisabled: false})
        }
    }


    async loadTransactionsFromFile(a) {
        try {
            let input = document.createElement('input');
            input.type = 'file';
            input.onchange = e => {
                let file = e.target.files[0];
                let reader = new FileReader();
                reader.readAsText(file, 'UTF-8');
                reader.onload = readerEvent => {
                    result = JSON.parse(readerEvent.target.result)
                    if (result && result.length > 0) {
                        this.displayAndForceUpdate(file);
                    } else {
                        this.clearTransactions();
                        alert("Empty Transaction dataset.")
                    }
                }
            }
            input.click();
        } catch (err) {
            alert(err);
        }

    }

    saveTransactions(a) {
        if (result[0].txid !== 'none') {
            const fname = this.state.address.trim() + "_transactions.json";
            commonUtils.saveFile(JSON.stringify(result),fname);
        } else {
            alert("There is nothing to save!");
        }
    }

    // getUTxs(): Get Unspent Transactions 
    getUTxs = async (event) => {
        event.preventDefault();
        const working_address = this.state.address.trim();
        // validation: the input address must be 34 bytes:
        if (working_address.length !== 34) {
            alert("Not 34 chars in length.")
        }
        else {
            // validation: the input address must begin with D, A, or 9:
            if (working_address.slice(0,1) !== 'D' && working_address.slice(0,1) !== 'A' && working_address.slice(0,1) !== '9') {
                alert("Dogecoin Address must start with an A, 9, or D.");
            } else {
                switch (this.props.selectedAPI) {
                    case config.API_BlockCypher:
                        result = await get_the_Blockcypher_transactions(working_address);
                        break;
                    case config.API_TBD:
                        result = config.No_Work_To_Do;
                        alert("Sorry, this is a placeholder for a new API implementation.")
                        break;
                    default: 
                        alert(`Unexpected value of ${this.props.selectedAPI} for API in B1.js.`)
                        break;
                }
                console.log(result);
                if (result === config.No_Unspent_Transactions || result === config.No_Work_To_Do) {
                    if (result === config.No_Unspent_Transactions) {
                        alert(config.No_Unspent_Transactions);
                    }
                    this.clearTransactions();
                } else {
                    // happy path
                    this.displayAndForceUpdate(null);
                }
            }
        }
    }

    render () {
        return (
            <Container>
                <h1>Transactions Manager</h1>
                <br />
                <h2>Pull Transactions</h2>

                <APISelector generica={this.props.generica} selectedAPI={this.props.selectedAPI} />
                <div>Currently Selected API: <strong>{this.props.selectedAPI}</strong></div>
                <br />
                <form onSubmit={this.getUTxs}>
                    <label>
                        Retrieve Unspent transactions from a Dogecoin Address: <input type="text" value={this.state.address} onChange={this.handleChange} style={{width: "350px"}} />
                    </label>
                    <input disabled={!this.state.SaveButtonDisabled} className="official-general-buttonstyle" style={{margin:"1%"}} type="submit" value="Retrieve" />
                </form>

                <HoverButton className='official-general-buttonstyle' disabled={this.state.SaveButtonDisabled} onClick={() => this.saveTransactions()}>Save</HoverButton>
                <HoverButton className='official-general-buttonstyle' disabled={false} onClick={() => this.loadTransactionsFromFile()}>Load</HoverButton>
                <HoverButton className='official-general-buttonstyle' disabled={false} onClick={() => this.clearTransactions()}>Clear</HoverButton>

                <br />
                <table className='basic-container rounded'>
                    <thead>
                    <tr>
                    <th>Idx</th>
                    <th>Hash</th>
                    <th>Output_No</th>
                    <th>Value</th>
                    <th>Script Hex</th>
                    </tr>
                    </thead>
                    <tbody>
                        {
                        result.map((value, key) => {
                        return (
                            <tr key={key}>
                            <td>{key}</td>
                            <td>{value.txid}</td>
                            <td>{value.output_no}</td>
                            <td>{value.value}</td>
                            <td>{value.script_hex}</td>
                            </tr>
                        );
                        })
                    }
                    </tbody>
                </table>

                <Container hidden={this.state.SaveButtonDisabled}>
                    <div>Transaction Count: <strong>{this.state.transactionCount}</strong></div>
                    <div>Address: <strong>{this.state.address.trim()}</strong></div>
                    <div>Total (for selected transactions): <strong> Ð {this.state.amountForBatch}</strong></div>
                    <br />

                    <p>WIP v </p>
                    <div>Enter one Index from above: </div>
                    <input type="text" pattern="[0-9]" onInput={this.selectOneIndex.bind(this)}/>
                    <div>Selected Index = {this.state.selectedIndex}</div>
                    <HoverButton className='official-general-buttonstyle' onClick={() => this.submitOneIndex()}>Go</HoverButton>
                </Container>
                <Container hidden={this.state.SingleTransactionDisabled}>
                    <hr />
                    <p>Enter in the destination address and the amount you wish to send.</p>
                    <h5>(the mining fee will be added to this amount, unless the total amount is indicated, then it will be subtracted)</h5>
                    <p>txid: <strong>{this.state.oneTransaction.txid}</strong></p>
                    <p>value: <strong>{this.state.oneTransaction.value}</strong></p>
                    <form onSubmit={this.createSpendOne}>
                        <label>
                            Destination Dogecoin Address: <input type="text" value={this.state.destAddress} onChange={this.handleDestAddressChange} style={{width: "350px"}} />
                        </label>
                        <label>
                            Amount To Send: <input type="text" value={this.state.sendAmount} onChange={this.handleSendAmountChange} style={{width: "150px"}} />
                        </label>
                        <input className="official-general-buttonstyle" style={{margin:"1%"}} type="submit" value="Next" />
                    </form>
                </Container>
                <Container hidden={this.state.SingleTransactionPreviewDisabled}>
                    <hr />
                    <p>Prepare Block (TBD)</p>
                    <button disabled={true}>Next</button>
                    <hr />
                    <p>Prepare Signature (TBD)</p>
                    <button disabled={true}>Next</button>
                    <hr />
                    <p>Review and Broadcast</p>
                    <p>From:      <strong>{this.state.address}</strong></p>
                    <p>To:        <strong>{this.state.destAddress}</strong></p>
                    <p>Amount:      <strong>Ð{this.state.sendAmount}</strong></p>
                    <p>Mining Fee:  <strong>Ð{config.defaultMiningFee}</strong></p>
                    <p><strong>Total to Send:  Ð{this.state.sendAmountGrandTotal}</strong></p>
                    <button disabled={true}>Submit</button>
                    <hr />
                </Container>
            </Container>
        );
    }
}

export default B1;
/* ChatGPT Ref: ./src/Screens/C1.js */
import React from 'react';
import Container from 'react-bootstrap/Container';
//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";


class C1 extends React.Component {

    render () {
        return (
            <Container>
                <h1>ABOUT</h1>
                <hr />
                <h3 style={{color: "red"}}>#DECENTRALIZATION</h3>
                <hr />
                <p>This site is planned to be a nodeJS refactoring of dogecoinmultisig.org</p>
                <p>This is open source code which is available at: <a href="https://github.com/tomcarbon/toolfrog">github location</a></p>
            </Container>
        );
    }
}

export default C1;
/* ChatGPT Ref: ./src/Screens/D1.js */
import React from 'react';
import Container from 'react-bootstrap/Container';
//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";


class D1 extends React.Component {

    render () {
        return (
            <Container>
                <h1>DBS</h1>
                <p>TBD</p>
                <p>DogecoinBankingSuite emulation goes here</p>
            </Container>
        );
    }
}

export default D1;
/* ChatGPT Ref: ./src/Screens/E1.js */
import React from 'react';
import Container from 'react-bootstrap/Container';
//import Row from "react-bootstrap/Row";
//import Col from "react-bootstrap/Col";


class E1 extends React.Component {

    render () {
        return (
            <Container>
                <h1>WITHDRAW</h1>
                <p>TBD</p>
                <p>DCMS-style Withdraw (Spend) functionality goes here</p>
            </Container>
        );
    }
}

export default E1;
/* ChatGPT Ref: ./src/setupTests.js */
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
